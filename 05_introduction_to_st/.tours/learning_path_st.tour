{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1 - Introduction to ST Programming",
  "steps": [
    {
      "title": "Introduction",
      "description": "# Introduction to ST Programming\r\n\r\nWelcome to this ST programming training session! This code tour is designed for individuals familiar with SCL programming who want to transition to ST. We'll focus on the key differences between the two languages. ST is a text-based language following IEC 61131-3, while SCL is Siemens' implementation for SIMATIC. We'll cover syntax, data types, control structures, and function/block creation. By understanding these variations, you can leverage your SCL knowledge and smoothly transition to ST programming in Siemens environments.\r\n\r\n> Please note that this training assumes a foundational understanding of SCL programming. We will focus solely on the crucial distinctions, enabling you to quickly adapt your skills to ST programming.\r\n\r\nLet's dive into the world of ST programming and enhance your programming expertise in Siemens control systems."
    },
    {
      "description": "## ST Programm\r\n\r\nA ST program consists of a `CONFIGURATION` one or more Program Organization Unit (POUs) where is at minimum one `PROGRAM` POU."
    },
    {
      "file": "src/configuration.st",
      "description": "# Configuration\r\n\r\nThis is the configuration file. It is used to abstract the hardware from the software part of the application. It defines all the resources of an application and consists of tasks, used to describe the order of execution of programs, and global variables, which declare I/O specific dependencies.",
      "line": 4,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 20
        }
      }
    },
    {
      "file": "src/configuration.st",
      "description": "## Task declaration\r\n\r\nWhile a SCL program is organized in OBs, a ST program is organized in tasks and programs. \r\n\r\nHere the task with the name \"Main\" is created. It will call the program \"MyProgram\" cyclically with the lowest priority 1.\r\n\r\nTo call execute the task every 10ms, you can use the keyword `INTERVAL`\r\n\r\n```\r\nTASK Main (INTERVAL := T#10ms, PRIORITY := 1);\r\n```\r\n\r\n",
      "line": 2,
      "selection": {
        "start": {
          "line": 2,
          "character": 5
        },
        "end": {
          "line": 2,
          "character": 52
        }
      }
    },
    {
      "file": "src/configuration.st",
      "description": "## Global variable declaration\r\n\r\nGlobal variables are symbols that are globally available over all program organization units. Variables, IO symbols and instances can be declared globally.",
      "line": 8,
      "selection": {
        "start": {
          "line": 4,
          "character": 1
        },
        "end": {
          "line": 7,
          "character": 12
        }
      },
      "title": "Global variable declaration"
    },
    {
      "title": "Global variable with initializer",
      "file": "src/configuration.st",
      "description": "## Global variables with initializing\r\n\r\nGlobal variable declaration with initializing. Just assign the value behind the date type.",
      "line": 9,
      "selection": {
        "start": {
          "line": 6,
          "character": 9
        },
        "end": {
          "line": 6,
          "character": 31
        }
      }
    },
    {
      "file": "src/configuration.st",
      "description": "## Multiple VAR_GLOBAL secctions\r\nWithin a `CONFIGURATION` multiple `VAR_GLOBAL` sections are allowed",
      "line": 8,
      "selection": {
        "start": {
          "line": 8,
          "character": 5
        },
        "end": {
          "line": 8,
          "character": 45
        }
      },
      "title": "Multiple VAR_GLOBAL sections"
    },
    {
      "file": "src/configuration.st",
      "description": "## IO symbols\r\n\r\nA direct access at input (I), output (Q) or memory (M) area of the PLC can be designated as a global variable using the keyword```AT```. After the letter indicating the area, use X (BIT), B (BYTE), W (WORD), D (DWORD) or L (LWORD) to indicate the width. If no letter for width is used, the width is recognized as one bit.  \r\nA list of all elementary data types that are supported can be found in the [Additional information][Additional information#2] section.",
      "line": 12,
      "selection": {
        "start": {
          "line": 9,
          "character": 9
        },
        "end": {
          "line": 12,
          "character": 53
        }
      }
    },
    {
      "file": "src/configuration.st",
      "description": "## Global constants\r\n\r\nIn the `CONFIGURATION` section also global constants can be declared.",
      "line": 19,
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 19,
          "character": 12
        }
      }
    },
    {
      "description": "# Program Organization Unit\r\n\r\nA POU (Program Organization Unit) is a fundamental unit in programming with Structured Text (ST) and other IEC 61131-3 standard languages. A POU represents a standalone section of the program and contains the code that performs specific tasks.\r\n\r\nTypical POUs are:\r\n\r\n- `Program`: Controls the main flow of the program.\r\n- `Function`: Performs a specific calculation or operation and returns a value.\r\n- `Function Block`: Combines data and logic to provide specific functionality.",
      "line": 13
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "# POU: Program\r\n\r\nThe POU `PROGRAM` declaration defines a program, the variables it uses and the code body which will be executed.",
      "line": 3,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 23
        }
      }
    },
    {
      "file": "04_introduction_to_st/src/ExampleProgram.st",
      "description": "test",
      "line": 2
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "## External variables\r\n\r\nGlobal variables from the config file can be made acessible for a program in the`VAR_EXTERNAL`section.",
      "line": 9,
      "selection": {
        "start": {
          "line": 2,
          "character": 1
        },
        "end": {
          "line": 4,
          "character": 12
        }
      }
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "## Static variables\r\n\r\nThe static section can be used to create variables which store values that need to be available over multiple cycles.",
      "line": 13,
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 8,
          "character": 12
        }
      }
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "## Temporary variables\r\n\r\nThe temp section can be used to create variables which store interim results during the execution.",
      "line": 17,
      "selection": {
        "start": {
          "line": 10,
          "character": 1
        },
        "end": {
          "line": 12,
          "character": 12
        }
      }
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "## Code body\r\n\r\nBelow the variable declaration is the code body of the program. It contains the code that will be executed when the program is called by a task.",
      "line": 26,
      "selection": {
        "start": {
          "line": 14,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 22
        }
      }
    },
    {
      "file": "src/ExampleProgram.st",
      "description": "### Function call\r\n\r\nHere the function \"StartConveyor\" is called. A function is a program organization unit that does not store its state, i.e. inputs, internals and outputs/results. It may or may not additionally declare a return value.  \r\nIn the next step we will have a look at at the function declaration.",
      "line": 22,
      "selection": {
        "start": {
          "line": 22,
          "character": 9
        },
        "end": {
          "line": 22,
          "character": 82
        }
      }
    },
    {
      "description": "# Namespaces\r\n\r\nNamespaces combine a number of language elements in a single entity. They allow you to structure your code in separate scopes and isolate them from one another. \r\n  \r\nA namespace can contain the following language elements:  \r\n- Namespace\r\n- Function\r\n- Function block\r\n- Class\r\n- Interface\r\n- Type"
    },
    {
      "file": "src/Namespace/NamespaceExample.st",
      "description": "Namespace example",
      "line": 20,
      "title": "Namespace Example",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 20,
          "character": 14
        }
      }
    },
    {
      "file": "src/Namespace/UsageOfNameSpace.st",
      "description": "# Using namespaces\r\n\r\nBecause we are using the functions declared in the``Conveyors``namespace in this program, we have to declare this with the``USING``keyword.",
      "line": 1
    },
    {
      "file": "src/Namespace/NamespaceExample.st",
      "description": "# Functions and Function Blocks\r\n\r\nA function has a code body and can declare the following sections: Input, Inout, Output, Temp, External.  \r\n  \r\nThe same goes for a function block. The difference to a function is, that a function block is able to preserve its state over multiple cycles and can additionally declare a Static section. That shows in a different behavior. While all the variables in a function are valid only in the function's scope, the variables of a function block remain valid outside its scope. Hence, a function block also defines a struct, containing the variables of the sections VAR_INPUT, VAR_OUTPUT and VAR. Variables declared in VAR_IN_OUT or VAR_TEMP are not part of that struct, so they are only available inside the function block.\r\n\r\nThe accessibility rules for the fields of such a struct and the conditions for issuing a call to a function block instance are as follows:\r\n\r\n- Variables declared in the VAR section are accessible only inside the function block and have a default setting of PRIVATE.\r\n- The accessibility of variables in the VAR section can be extended by using the access modifiers PUBLIC or INTERNAL (access modifiers will be covered in a later section).\r\n- It is not possible to call a function block instance if the instance is declared in the VAR_INPUT section. Modifying the instance is also not allowed.\r\n- Variables declared in the VAR_OUTPUT section of a function block are only writable inside that function block.\r\n- To call an instance of a function block, you can omit actual parameters for VAR_INPUT and VAR_OUTPUT partly or completely.",
      "line": 1
    }
  ],
  "description": "Teaches the basics of ST programming",
  "isPrimary": true
}